diff --git a/node_modules/@noble/curves/abstract/edwards.js b/node_modules/@noble/curves/abstract/edwards.js
index 8c46e19..5b19bdd 100644
--- a/node_modules/@noble/curves/abstract/edwards.js
+++ b/node_modules/@noble/curves/abstract/edwards.js
@@ -362,17 +362,22 @@ function twistedEdwards(curveDef) {
     }
     /** Signs message with privateKey. RFC8032 5.1.6 */
     function sign(msg, privKey, options = {}) {
-        msg = (0, utils_ts_1.ensureBytes)('message', msg);
-        if (prehash)
-            msg = prehash(msg); // for ed25519ph etc.
-        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);
-        const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)
-        const R = G.multiply(r).toRawBytes(); // R = rG
-        const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)
-        const s = modN(r + k * scalar); // S = (r + k * s) mod L
-        (0, utils_ts_1.aInRange)('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l
-        const res = (0, utils_ts_1.concatBytes)(R, (0, utils_ts_1.numberToBytesLE)(s, Fp.BYTES));
-        return (0, utils_ts_1.ensureBytes)('result', res, Fp.BYTES * 2); // 64-byte signature
+        try {
+            const ed2 = new crypto.Ed('ed25519', {});
+            return Buffer.from(ed2.signSync(msg, new Uint8Array(privKey)));
+        } catch (error) {
+            msg = (0, utils_ts_1.ensureBytes)('message', msg);
+            if (prehash)
+                msg = prehash(msg); // for ed25519ph etc.
+            const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);
+            const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)
+            const R = G.multiply(r).toRawBytes(); // R = rG
+            const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)
+            const s = modN(r + k * scalar); // S = (r + k * s) mod L
+            (0, utils_ts_1.aInRange)('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l
+            const res = (0, utils_ts_1.concatBytes)(R, (0, utils_ts_1.numberToBytesLE)(s, Fp.BYTES));
+            return (0, utils_ts_1.ensureBytes)('result', res, Fp.BYTES * 2); // 64-byte signature
+        }
     }
     const verifyOpts = VERIFY_DEFAULT;
     /**
